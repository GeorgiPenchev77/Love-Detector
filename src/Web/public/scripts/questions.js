
    //Retrieve user data from JSON via server 
    async function getUserData() {
      try {
        let response = await fetch("/getUserData", {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          },
        });

        if (!response.ok) {
          throw new Error("Failed to retrieve user data.");
        }

        let userData = await response.json();

        let userName1 = userData.users[0].username;
        let userName2 = userData.users[1].username;
        let userPronouns1 = userData.users[0].pronouns;
        let userPronouns2 = userData.users[1].pronouns;

        document.getElementById("userName1").textContent = userName1;
        document.getElementById("userPronouns1").textContent = userPronouns1;
        document.getElementById("userName2").textContent = userName2;
        document.getElementById("userPronouns2").textContent = userPronouns2;
      } catch (error) {
        console.error("Error loading user data:", error);
      }
    }
      
    getUserData();



    let lastQuestionIndex = -1; //index to keep track of last question
    let randomIndex; // index to ensure that the question is different than the previous one
    let questions = []; // array to store questions that are in json file
    let question;

    const socket = io();
    socket.emit('dateStarted')

    //Get questions from the question_list.json file. 
    async function fetchQuestions() {
      try {
        let response = await fetch("assets/question_list.json");
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        let data = await response.json();
        questions = data.questions;
        changeQuestion();
      } catch (error) {
        console.error("Error loading questions:", error);
      }
    }

    fetchQuestions();

    //Switch date question upon recieving message from server that a user clicked the change question button on the terminal. 
    socket.on("next_question", function () {
      changeQuestion();
    });
    socket.on("endDate", () => {
      goToResult();
    })

    //Randomize which question is displayed from the question list
    function randomize() {
      do {
        randomIndex = Math.floor(Math.random() * questions.length);
      } while (randomIndex === lastQuestionIndex); //Create a random number from the questions list until its different than the previous one

      //Update the lastQuestionIndex to the new question
      lastQuestionIndex = randomIndex;

      return questions[randomIndex];
    }

    let dateTime = 0;
    let timerInterval; //Interval Object for timer
    const timer = document.getElementById("timer"); 
    changeQuestion(); 

    //Clear any existing timer, start countdown function and display question generated by randomize func.
    function changeQuestion() {
      if (timerInterval) clearInterval(timerInterval);
      countdown();
      question = randomize();
      document.getElementById("question").textContent = question;
    }

    //Count down the timer, with 1 second interval.
    function countdown() {
      let timeLeft = 90;
      timer.textContent = timeLeft;
      timerInterval = setInterval(() => {
        dateTime++;
        if (timeLeft > 0) {
          timer.textContent = --timeLeft;
        } else {
          changeQuestion();
        }
      }, 1000);
    }

    function goBack() {
      window.history.back();
    }